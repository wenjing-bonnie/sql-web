<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:app="http://www.springframework.org/schema/aop" xmlns:tx="http://www.springframework.org/schema/tx"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
        http://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/context
              http://www.springframework.org/schema/context/spring-context-4.2.xsd
        http://www.springframework.org/schema/aop
        https://www.springframework.org/schema/aop/spring-aop.xsd http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx.xsd">

    <context:property-placeholder location="classpath:config/jdbc.properties"/>
    <!--配置数据源-->
    <bean id="mysqlDataSource" class="org.apache.commons.dbcp.BasicDataSource"
          name="mysqlDataSource">
        <property name="driverClassName" value="${jdbc.mysql.driverClass}"/>
        <property name="url" value="${jdbc.mysql.url}"/>
        <property name="username" value="${jdbc.mysql.user}"/>
        <property name="password" value="${jdbc.mysql.password}"/>
        <property name="maxActive" value="500"/>
        <property name="initialSize" value="2"/>
        <property name="minIdle" value="2"/>
    </bean>
    <!-- ====== mybatis新增的代码 ===== -->
    <!--配置SessionFactory-->
    <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean" name="sqlSessionFactory">
        <property name="dataSource" ref="mysqlDataSource"/>
        <property name="configLocation" value="classpath:config/mybatis-config.xml"/>
    </bean>
    <!--方法一：单个定义Book的mapper文件，为单个接口文件生成代理对象-->
    <!--！！！！！此时的sqlSessionFactory中的name="dataSource"配置必须使用ref="mysqlDataSource"-->
    <bean id="bookMapper" class="org.mybatis.spring.mapper.MapperFactoryBean">
        <property name="mapperInterface" value="com.wj.mysql.model.BookMapper"/>
        <property name="sqlSessionFactory" ref="sqlSessionFactory"/>
    </bean>
    <!--方法二：扫描对应的包下的每个接口文件，为每个接口生成代理对象-->
    <!--注意:如果你只有一个DataSource,那么就没有必要去指定SqlSessionFactory或SqlSessionTemplate，
    因为MapperScannerConfigurer将会创建MapperFactoryBean，之后自动装配。
    但是，如果你使用了一个以上的DataSource(因此，也是多个的SqlSessionFactory),
    那么就可以使用sqlSessionFactoryBeanName去指定sqlSessionFactory,否则自动装配可能会失效。-->
    <!--    <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">-->
    <!--        &lt;!&ndash;        <property name="sqlSessionFactoryBeanName" value="sqlSessionFactory"/>&ndash;&gt;-->
    <!--        <property name="basePackage" value="com.wj.mysql.model"/>-->
    <!--    </bean>-->

    <!--    <bean id="sqlSessionTemplate" class="org.mybatis.spring.SqlSessionTemplate">-->
    <!--        <constructor-arg type="org.apache.ibatis.session.SqlSessionFactory" ref="sqlSessionFactory"/>-->
    <!--    </bean>-->
    <!-- =====   mybatis新增的代码 ===== -->
    <!--配置事务管理 先暂时不加ORM，后面直接在这个基础上去学习MyBatis-->
    <bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <property name="dataSource" ref="mysqlDataSource"/>
    </bean>

    <!--Spring AOP-->
    <tx:advice id="advice" transaction-manager="transactionManager">
        <tx:attributes>
            <tx:method name="*SQL" propagation="REQUIRED"/>
            <tx:method name="insert*"/>
            <tx:method name="select*"/>
            <tx:method name="update*"/>
            <tx:method name="delete*"/>
        </tx:attributes>
    </tx:advice>
    <app:config>
        <app:pointcut id="pointcut" expression="execution(* com.wj.mysql.service.MysqlBookManagerService.*(...))"/>
        <app:advisor advice-ref="advice" pointcut-ref="pointcut"/>
    </app:config>
</beans>